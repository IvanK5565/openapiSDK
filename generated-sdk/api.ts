/* tslint:disable */
/* eslint-disable */
/**
 * Library System API
 * REST API для керування книгами та авторами у бібліотечній системі
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Author
 */
export interface Author {
    /**
     * 
     * @type {number}
     * @memberof Author
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Author
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Author
     */
    'bio'?: string;
    /**
     * 
     * @type {string}
     * @memberof Author
     */
    'birth_date'?: string;
}
/**
 * 
 * @export
 * @interface AuthorInput
 */
export interface AuthorInput {
    /**
     * 
     * @type {string}
     * @memberof AuthorInput
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof AuthorInput
     */
    'bio'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorInput
     */
    'birth_date': string;
}
/**
 * 
 * @export
 * @interface Book
 */
export interface Book {
    /**
     * 
     * @type {number}
     * @memberof Book
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Book
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof Book
     */
    'isbn'?: string;
    /**
     * 
     * @type {string}
     * @memberof Book
     */
    'published_date'?: string;
    /**
     * 
     * @type {number}
     * @memberof Book
     */
    'author_id'?: number;
}
/**
 * 
 * @export
 * @interface BookInput
 */
export interface BookInput {
    /**
     * 
     * @type {string}
     * @memberof BookInput
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof BookInput
     */
    'isbn': string;
    /**
     * 
     * @type {string}
     * @memberof BookInput
     */
    'published_date': string;
    /**
     * 
     * @type {number}
     * @memberof BookInput
     */
    'author_id': number;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Отримати список авторів
         * @param {string} [name] Фільтр за іменем автора
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorsGet: async (name?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/authors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Видалити автора
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorsIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('authorsIdDelete', 'id', id)
            const localVarPath = `/authors/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Отримати автора за ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorsIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('authorsIdGet', 'id', id)
            const localVarPath = `/authors/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Оновити дані автора
         * @param {number} id 
         * @param {AuthorInput} authorInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorsIdPut: async (id: number, authorInput: AuthorInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('authorsIdPut', 'id', id)
            // verify required parameter 'authorInput' is not null or undefined
            assertParamExists('authorsIdPut', 'authorInput', authorInput)
            const localVarPath = `/authors/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authorInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Створити нового автора
         * @param {AuthorInput} authorInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorsPost: async (authorInput: AuthorInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorInput' is not null or undefined
            assertParamExists('authorsPost', 'authorInput', authorInput)
            const localVarPath = `/authors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authorInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Отримати список книг
         * @param {number} [authorId] Фільтр за автором
         * @param {string} [title] Пошук за назвою
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksGet: async (authorId?: number, title?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/books`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorId !== undefined) {
                localVarQueryParameter['author_id'] = authorId;
            }

            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Видалити книгу
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('booksIdDelete', 'id', id)
            const localVarPath = `/books/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Отримати книгу за ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('booksIdGet', 'id', id)
            const localVarPath = `/books/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Оновити книгу
         * @param {number} id 
         * @param {BookInput} bookInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksIdPut: async (id: number, bookInput: BookInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('booksIdPut', 'id', id)
            // verify required parameter 'bookInput' is not null or undefined
            assertParamExists('booksIdPut', 'bookInput', bookInput)
            const localVarPath = `/books/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bookInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Додати нову книгу
         * @param {BookInput} bookInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksPost: async (bookInput: BookInput, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookInput' is not null or undefined
            assertParamExists('booksPost', 'bookInput', bookInput)
            const localVarPath = `/books`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bookInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Отримати список авторів
         * @param {string} [name] Фільтр за іменем автора
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authorsGet(name?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Author>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authorsGet(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.authorsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Видалити автора
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authorsIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authorsIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.authorsIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Отримати автора за ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authorsIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Author>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authorsIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.authorsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Оновити дані автора
         * @param {number} id 
         * @param {AuthorInput} authorInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authorsIdPut(id: number, authorInput: AuthorInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authorsIdPut(id, authorInput, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.authorsIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Створити нового автора
         * @param {AuthorInput} authorInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authorsPost(authorInput: AuthorInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Author>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authorsPost(authorInput, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.authorsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Отримати список книг
         * @param {number} [authorId] Фільтр за автором
         * @param {string} [title] Пошук за назвою
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async booksGet(authorId?: number, title?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Book>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.booksGet(authorId, title, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.booksGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Видалити книгу
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async booksIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.booksIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.booksIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Отримати книгу за ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async booksIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Book>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.booksIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.booksIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Оновити книгу
         * @param {number} id 
         * @param {BookInput} bookInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async booksIdPut(id: number, bookInput: BookInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.booksIdPut(id, bookInput, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.booksIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Додати нову книгу
         * @param {BookInput} bookInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async booksPost(bookInput: BookInput, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Book>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.booksPost(bookInput, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.booksPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Отримати список авторів
         * @param {string} [name] Фільтр за іменем автора
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorsGet(name?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<Author>> {
            return localVarFp.authorsGet(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Видалити автора
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorsIdDelete(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authorsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Отримати автора за ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorsIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Author> {
            return localVarFp.authorsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Оновити дані автора
         * @param {number} id 
         * @param {AuthorInput} authorInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorsIdPut(id: number, authorInput: AuthorInput, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authorsIdPut(id, authorInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Створити нового автора
         * @param {AuthorInput} authorInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorsPost(authorInput: AuthorInput, options?: RawAxiosRequestConfig): AxiosPromise<Author> {
            return localVarFp.authorsPost(authorInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Отримати список книг
         * @param {number} [authorId] Фільтр за автором
         * @param {string} [title] Пошук за назвою
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksGet(authorId?: number, title?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<Book>> {
            return localVarFp.booksGet(authorId, title, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Видалити книгу
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksIdDelete(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.booksIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Отримати книгу за ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Book> {
            return localVarFp.booksIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Оновити книгу
         * @param {number} id 
         * @param {BookInput} bookInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksIdPut(id: number, bookInput: BookInput, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.booksIdPut(id, bookInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Додати нову книгу
         * @param {BookInput} bookInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksPost(bookInput: BookInput, options?: RawAxiosRequestConfig): AxiosPromise<Book> {
            return localVarFp.booksPost(bookInput, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Отримати список авторів
     * @param {string} [name] Фільтр за іменем автора
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authorsGet(name?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).authorsGet(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Видалити автора
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authorsIdDelete(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).authorsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Отримати автора за ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authorsIdGet(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).authorsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Оновити дані автора
     * @param {number} id 
     * @param {AuthorInput} authorInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authorsIdPut(id: number, authorInput: AuthorInput, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).authorsIdPut(id, authorInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Створити нового автора
     * @param {AuthorInput} authorInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authorsPost(authorInput: AuthorInput, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).authorsPost(authorInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Отримати список книг
     * @param {number} [authorId] Фільтр за автором
     * @param {string} [title] Пошук за назвою
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public booksGet(authorId?: number, title?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).booksGet(authorId, title, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Видалити книгу
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public booksIdDelete(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).booksIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Отримати книгу за ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public booksIdGet(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).booksIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Оновити книгу
     * @param {number} id 
     * @param {BookInput} bookInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public booksIdPut(id: number, bookInput: BookInput, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).booksIdPut(id, bookInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Додати нову книгу
     * @param {BookInput} bookInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public booksPost(bookInput: BookInput, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).booksPost(bookInput, options).then((request) => request(this.axios, this.basePath));
    }
}



